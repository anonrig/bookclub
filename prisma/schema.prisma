datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(PENDING)

  accounts            Account[]
  sessions            Session[]
  comments            Comment[]
  bookRecommendations BookRecommendation[]

  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Book {
  id          String   @id @default(cuid())
  googleId    String   @unique @map("google_id")
  title       String   @db.Text
  subtitle    String   @db.Text
  description String   @db.Text
  pageCount   Int      @map("page_count")
  url         String   @db.Text
  authors     Json     @db.Json
  identifiers Json     @db.Json
  thumbnail   String?  @db.Text
  publishedAt Int      @map("published_at") @db.Year
  createdAt   DateTime @default(now()) @map("created_at")
  isRead      Boolean  @default(false) @map("is_read")

  comments        Comment[]
  recommendations BookRecommendation[]

  @@index([createdAt])
  @@map("books")
}

model BookRecommendation {
  userId    String   @map("user_id")
  bookId    String   @map("book_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
  @@index([bookId, createdAt])
  @@map("book_recommendations")
}

model Comment {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  userId String  @map("user_id")
  bookId String? @map("book_id")

  book Book? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId, createdAt])
  @@map("comment")
}

enum Role {
  BLOCKED
  PENDING
  USER
  ADMIN
}
